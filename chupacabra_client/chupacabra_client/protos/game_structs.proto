syntax = "proto3";
package game_structs;

/////////////////////////////////////////
//                                     //
// Metadata about the particular type  //
// of game being played                //
//                                     //
/////////////////////////////////////////


// Description of a move available in the game
message MoveDescription {
    string name = 1;
    string description = 2;
    repeated string modes = 3;  // If this is only available on certain special actions
}

// A description of the game
message GameDescription {
    string name = 1;
    string description = 2;
}

// A list of game moves
message GameMovesResponse {
    repeated MoveDescription moves = 1;
}

message LegalMovesResponse {
    bool success = 1;
    string message = 2;
    repeated string moves = 3;
}

/////////////////////////////////////////
//                                     //
// Types describing the basic elements //
// of the game                         //
//                                     //
/////////////////////////////////////////


// Value for a single coordinate on the field of play
message Coordinate {
    string name = 1;
    int32 value = 2;
}

// A full description of a position on the field of play
message Coordinates {
    string name = 1;
    repeated Coordinate values = 2;
}

// Represents a move a single game piece
message GamePieceMove {
    string piece_id = 1;
    repeated Coordinates locations = 2;
    string comment = 3;
}

// Represents a move. Ideally, the move description will
// describe the necessary formulation.
message Move {
    string move_name = 1;
    string player_id = 2;
    repeated GamePieceMove piece_moves = 3;
    string comment = 4;
}


// Description of the status of a game piece
message GamePiece {
    string id = 1;
    string name = 2;
    string player = 3;
    Coordinates location = 4;
}

// Description of a particular piece of the field of play
// This can include things like card stacks, hands,
// or traditional 2D game boards
message GameBoard {
    string id = 1;
    string name = 2;
    string type = 3;
    repeated GamePiece pieces = 4;
}


// Response to a status request
message GameRequestStatusResponse {
    bool success = 1;
    string message = 2;
    bool game_found = 3;
    string game_id = 4;
}


// Response to a game request
message GameRequestResponse {
    bool success = 1;
    string message = 2;
    string request_id = 3;
    string game_id = 4;
}


/////////////////////////////////////////
//                                     //
// Types describing the status of the  //
// of the current game                 //
//                                     //
/////////////////////////////////////////

// Basic info on a player
message PlayerInfo {
    string username = 1;
    string nickname = 2;
    string level = 3;
    string team = 4;
}

// Scores
message GameScore {
    string player_id = 1;
    string player_name = 2;
    string score_type = 3;
    int32 int_score = 4;
    float float_score = 5;
    string comment = 6;
}

message GameStatus {
    string status = 1;
    string comment = 2;
    repeated GameScore scores = 3;
}

// Current state of the board
message GameState {
    GameStatus status = 1;
    repeated GameBoard boards = 2;
    string mode = 3;
    int32 turn_time_remaining = 4; // in seconds
    int32 game_time_remaining = 5; // in seconds
}

// The current status of a game
message GameStatusInfo {
    string id = 1;
    repeated PlayerInfo players = 2;
    GameState state = 3;
    repeated string legal_moves = 4;
}

// If an action was made, the new status
message GameStatusResponse {
    bool success = 1;
    string message = 2;
    GameStatusInfo status_info = 3;
}
